plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.11.0-SNAPSHOT" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:@YARN_MAPPINGS@:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}


import java.nio.file.Paths

tasks.register('buildMerged', Zip) {
    allprojects {
        dependsOn it.tasks.getByName("build")
    }
    def folder = file(".gradle/.mergemods")
    folder.mkdirs()
    def fabricJar = file("fabric/build/libs/${rootProject.archives_base_name}-${rootProject.minecraft_version}-fabric-${rootProject.mod_version}.jar")
    def forgeJar = file("forge/build/libs/${rootProject.archives_base_name}-${rootProject.minecraft_version}-forge-${rootProject.mod_version}.jar")
    def fabricFolder = new File(folder, ".tempFabric")
    def forgeFolder = new File(folder, ".tempForge")
    def mergeFolder = new File(folder, ".tempMerge")
    file("merging.policy").eachLine {
        if (it.isBlank() || it.startsWith("#")) return
        def env = it.substring(0, it.indexOf(' ')).toLowerCase()
        def path = Paths.get(it.substring(env.length() + 1)).toString()
        filesMatching(path) {
            if (!it._gr_dyn_.toString().contains(env)) {
                it.exclude()
            }
        }
    }
    forgeFolder.deleteDir()
    fabricFolder.deleteDir()
    mergeFolder.deleteDir()
    mergeFolder.mkdirs()
    archivesBaseName = "${rootProject.name}"
    archiveExtension = "jar"
    destinationDir = file('build/libs')
    duplicatesStrategy(DuplicatesStrategy.WARN)

    from zipTree(fabricJar)
    from zipTree(forgeJar)
}

rootProject.subprojects.forEach {
    buildMerged.mustRunAfter it.tasks.getByName("build")
}